"use client";

import {
  Bar,
  BarChart,
  Line,
  LineChart,
  Pie,
  PieChart,
  ResponsiveContainer,
  Tooltip,
  XAxis,
  YAxis,
} from "recharts";
import { useTheme } from "next-themes";

import {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

interface DataChartProps {
  type: "line" | "bar" | "pie";
}

export function DataChart({ type }: DataChartProps) {
  const { resolvedTheme } = useTheme();
  const isDark = resolvedTheme === "dark";

  // Adjust colors based on theme
  const axisColor = isDark ? "#888" : "#666";

  // Sample data for demonstration
  const lineData = [
    { quarter: "Q1 2023", value: 65.2 },
    { quarter: "Q2 2023", value: 65.8 },
    { quarter: "Q3 2023", value: 66.3 },
    { quarter: "Q4 2023", value: 66.7 },
    { quarter: "Q1 2024", value: 67.1 },
  ];

  const barData = [
    { region: "Berlin", value: 68.5 },
    { region: "Bavaria", value: 72.3 },
    { region: "NRW", value: 65.9 },
    { region: "Saxony", value: 63.2 },
    { region: "Hamburg", value: 70.1 },
  ];

  const pieData = [
    { name: "Services", value: 45 },
    { name: "Manufacturing", value: 25 },
    { name: "Construction", value: 10 },
    { name: "Agriculture", value: 5 },
    { name: "Other", value: 15 },
  ];

  if (type === "line") {
    return (
      <ChartContainer
        config={{
          employment: {
            label: "Employment Rate",
            color: "hsl(var(--chart-1))",
          },
        }}
        className="h-[300px]"
      >
        <LineChart
          accessibilityLayer
          data={lineData}
          margin={{ top: 10, right: 10, left: 10, bottom: 20 }}
        >
          <XAxis
            dataKey="quarter"
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            stroke={axisColor}
          />
          <YAxis
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            domain={[60, 70]}
            tickCount={5}
            stroke={axisColor}
          />
          <ChartTooltip content={<ChartTooltipContent />} />
          <Line
            type="monotone"
            dataKey="value"
            stroke="var(--color-employment)"
            strokeWidth={2}
            dot={{ r: 4 }}
            activeDot={{ r: 6 }}
          />
        </LineChart>
      </ChartContainer>
    );
  }

  if (type === "bar") {
    return (
      <ChartContainer
        config={{
          value: {
            label: "Employment Rate (%)",
            color: "hsl(var(--chart-1))",
          },
        }}
        className="h-[300px]"
      >
        <BarChart
          accessibilityLayer
          data={barData}
          margin={{ top: 10, right: 10, left: 10, bottom: 20 }}
        >
          <XAxis
            dataKey="region"
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            stroke={axisColor}
          />
          <YAxis
            tickLine={false}
            axisLine={false}
            tickMargin={8}
            domain={[60, 75]}
            tickCount={4}
            stroke={axisColor}
          />
          <ChartTooltip content={<ChartTooltipContent />} />
          <Bar
            dataKey="value"
            fill="var(--color-value)"
            radius={[4, 4, 0, 0]}
          />
        </BarChart>
      </ChartContainer>
    );
  }

  if (type === "pie") {
    return (
      <ChartContainer
        config={{
          value: {
            label: "Employment by Sector",
            color: "hsl(var(--chart-1))",
          },
        }}
        className="h-[300px]"
      >
        <ResponsiveContainer width="100%" height="100%">
          <PieChart>
            <Pie
              data={pieData}
              cx="50%"
              cy="50%"
              outerRadius={80}
              fill="var(--color-value)"
              dataKey="value"
              label={({ name, percent }) =>
                `${name} ${(percent * 100).toFixed(0)}%`
              }
            />
            <Tooltip
              contentStyle={{
                backgroundColor: isDark ? "hsl(var(--background))" : "#fff",
                borderColor: "hsl(var(--border))",
                color: "hsl(var(--foreground))",
              }}
            />
          </PieChart>
        </ResponsiveContainer>
      </ChartContainer>
    );
  }

  return null;
}
